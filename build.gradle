def checkUserProperty(String propertyName) {
    if (!project.hasProperty(propertyName)) {
        throw new GradleException('Property "' + propertyName + '" not defined, this should be defined in your "<USER_HOME>/.gradle/gradle.properties" file or on the command line using the -P flag.')
    }
}

ext.set('projectRoot', project.projectDir.toString())

buildscript {
    ext {
		scalaTestPlugin = '0.19'
		spotless = "3.18.0"
    }

    repositories {
        jcenter()
		mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        
    }

    dependencies {
        classpath("gradle.plugin.com.github.maiflai:gradle-scalatest:$scalaTestPlugin")
		classpath "com.diffplug.spotless:spotless-plugin-gradle:$spotless"
    }
}

apply from: file("./gradle/dependency-versions-scala-" + "$scalaVersion" + ".gradle")
apply from: file("./gradle/dependency-versions.gradle")

subprojects {
    apply plugin: 'scala'
    apply plugin: 'com.github.maiflai.scalatest'
    apply plugin: "com.diffplug.gradle.spotless"

	spotless {
		format 'misc', {
			target '**/*.scala'
			trimTrailingWhitespace()
			endWithNewline()
		}

		scala {
			//scalafmt()
			// optional: you can specify a specific version or config file
			scalafmt('1.5.1').configFile(projectRoot + '/.scalafmt.conf')
		}
	}

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        testCompile("org.scalatest:scalatest_$scalaVersion:$scalatest")
        // scalatest plugin needs this to work with scalatest
        testRuntime("org.pegdown:pegdown:$pegdown")
    }

    tasks.withType(ScalaCompile) {
        configure(scalaCompileOptions.forkOptions) {
            jvmArgs = ['-Xss4m']
        }
        configure(scalaCompileOptions) {
            additionalParameters = ['-target:jvm-1.8']
        }
    }
}

project("99scalaproblems") {

    def projectName = "99scalaproblems"

    jar {
        baseName = "${projectName}_$scalaVersion"
        version = "$version"
    }

    dependencies {
        compile("org.scala-lang:scala-library:$scalaLibVersion")
        compile("org.scala-lang:scala-compiler:$scalaLibVersion")

    }
	
}